# This workflow automatically creates a release and publishes to nuget.org, if the package version does not already
# exist. For now it is just copied from this work in progress (which has more context in comments):
#   https://github.com/ehonda/EHonda.HelloNuget/blob/eb9bd36a907fb7ca57b6a88df6e935a285517ca4/.github/workflows/auto-release.yml
#
# This GitHub Actions workflow, named "Release and publish to nuget.org", is triggered on pushes to the `main` branch.
# It orchestrates a series of jobs to:
#   1. Run tests using a reusable workflow.
#   2. Extract package metadata (version and ID) from the project.
#   3. Check if the extracted package version already exists on nuget.org.
#   4. If the package version does not exist, it creates a new GitHub release.
#   5. Subsequently, it packs the project and publishes the new version to nuget.org.
#
# It originates from this:
#   https://github.com/ehonda/EHonda.HelloNuget/blob/eb9bd36a907fb7ca57b6a88df6e935a285517ca4/.github/workflows/auto-release.yml
#
name: Release and publish to nuget.org

# ➡️ Currently disabled, we first have to set up the `NUGET_ORG_API_KEY` secret in the repository settings.
# `workflow_dispatch` is just a placeholder, because `on` is required.
on:
  workflow_dispatch:
#   push:
#     branches:
#       - main

jobs:
  # This job, "test", executes the project's tests.
  # It achieves this by calling the reusable workflow defined in `./.github/workflows/dotnet-test.yml`.
  # This step is crucial for ensuring code quality and correctness before any release or publishing actions are taken.
  test:
    uses: ./.github/workflows/dotnet-test.yml

  # TODO: Adjust the hardcoded `src/TestUtilities.Scenarios`, it's wrong for this repo.
  # This job, "Get package metadata", extracts the package version and package ID
  # from the project. These values are then made available as outputs
  # (`package-version` and `package-id`) for use in subsequent jobs.
  get-package-metadata:
    name: Get package metadata
    runs-on: ubuntu-latest
    outputs:
      package-version: ${{ steps.get-package-version.outputs.package-version }}
      package-id: ${{ steps.get-package-id.outputs.package-id }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 9
      - name: Get package version
        id: get-package-version
        run: echo "package-version=$(dotnet build src/TestUtilities.Scenarios --getProperty:PackageVersion)" >> "$GITHUB_OUTPUT"
      - name: Get package id
        id: get-package-id
        run: echo "package-id=$(dotnet build src/TestUtilities.Scenarios --getProperty:PackageId)" >> "$GITHUB_OUTPUT"

  # This job, "Check nuget.org package exists", determines if the current package version
  # (obtained from `get-package-metadata`) is already published on nuget.org.
  # It outputs `should-release` ('true' or 'false') to control whether subsequent
  # release and publish jobs should run, preventing duplicate version releases.
  check-nuget-exists:
    name: Check nuget.org package exists
    runs-on: ubuntu-latest
    needs: get-package-metadata
    outputs:
      should-release: ${{ steps.check-nuget-exists.outputs.should-release }}
    steps:
      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 9
      - name: Check nuget.org package exists
        id: check-nuget-exists
        env:
          PACKAGE_VERSION: ${{ needs.get-package-metadata.outputs.package-version }}
          PACKAGE_ID: ${{ needs.get-package-metadata.outputs.package-id }}
        run: |
          LATEST_PACKAGE=$(nuget list $PACKAGE_ID -Source https://api.nuget.org/v3/index.json)
          LATEST_VERSION=$(echo $LATEST_PACKAGE | awk '{print $NF}')
          if [ "$LATEST_VERSION" == "$PACKAGE_VERSION" ]; then
            echo -e "\e[32mINFO:\e[0m Package $PACKAGE_ID@$PACKAGE_VERSION already exists"
            echo "should-release=false" >> $GITHUB_OUTPUT
          else
            echo -e "\e[32mINFO:\e[0m Package $PACKAGE_ID@$PACKAGE_VERSION does not exist"
            echo "should-release=true" >> $GITHUB_OUTPUT
          fi

  # This job, "Create release", creates a new GitHub release for the package.
  # It only runs if the preceding `check-nuget-exists` job determines that
  # the current package version does not already exist on nuget.org.
  # The job requires `contents: write` permission to create the release.
  # It tags the release with the package version (e.g., "v1.2.3") and auto-generates release notes.
  create-release:
    name: Create release
    runs-on: ubuntu-latest
    permissions:
      # Required to create the release
      contents: write
    needs: [test, get-package-metadata, check-nuget-exists]
    if: needs.check-nuget-exists.outputs.should-release == 'true'
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Create release
        env:
          PACKAGE_VERSION: ${{ needs.get-package-metadata.outputs.package-version }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: gh release create "v$PACKAGE_VERSION" --generate-notes

  # This job, "publish", is responsible for publishing the NuGet package to nuget.org.
  # It runs on an Ubuntu environment and depends on the successful completion of the `create-release` job.
  # The primary purpose is to make the newly created package version publicly available.
  # It requires the `NUGET_ORG_API_KEY` secret to authenticate with nuget.org.
  publish:
    runs-on: ubuntu-latest
    needs: create-release
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 9
      - name: Pack
        run: dotnet pack --configuration Release --output ./packages
      - name: Push to NuGet.org
        run: dotnet nuget push ./packages/*.nupkg --source https://api.nuget.org/v3/index.json --api-key "$NUGET_ORG_API_KEY"
        env:
          NUGET_ORG_API_KEY: ${{ secrets.NUGET_ORG_API_KEY }}
