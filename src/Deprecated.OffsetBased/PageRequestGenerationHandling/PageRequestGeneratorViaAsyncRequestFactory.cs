
using Deprecated.OffsetBased.Utilities;

namespace Deprecated.OffsetBased.PageRequestGenerationHandling;

/// <inheritdoc />
/// <remarks>
/// Page requests are generated by generating a base request via an async request factory and then adding the pagination
/// parameters to the request URI, as well as combining the base URI with the request URI.
/// </remarks>
[PublicAPI]
public class PageRequestGeneratorViaAsyncRequestFactory : IPageRequestGenerator
{
    private readonly Func<Uri?, long, CancellationToken, Task<HttpRequestMessage>> _requestFactory;


    /// <summary>
    /// Initializes a new instance of the <see cref="PageRequestGeneratorViaAsyncRequestFactory"/> class.
    /// </summary>
    /// <param name="makeRequestAsync">The factory to create the base request.</param>
    /// <param name="paginationParametersConfiguration">The configuration for the pagination parameters.</param>
    public PageRequestGeneratorViaAsyncRequestFactory(
        Func<CancellationToken, Task<HttpRequestMessage>> makeRequestAsync,
        PaginationParametersConfiguration paginationParametersConfiguration)
    {
        _requestFactory = CreateRequestFactory(makeRequestAsync, paginationParametersConfiguration);
    }

    /// <inheritdoc />
    public Task<HttpRequestMessage> GenerateAsync(
        Uri? baseUri,
        long page,
        CancellationToken cancellationToken = default)
        => _requestFactory(baseUri, page, cancellationToken);

    private static Func<Uri?, long, CancellationToken, Task<HttpRequestMessage>> CreateRequestFactory(
        Func<CancellationToken, Task<HttpRequestMessage>> baseRequestFactory,
        PaginationParametersConfiguration configuration)
        => async (baseUri, page, cancellationToken) =>
        {
            var request = await baseRequestFactory(cancellationToken);
            SetupRequestUriWithQueryParams(request, baseUri, PaginationParameters.From(page, configuration));
            return request;
        };

    private static void SetupRequestUriWithQueryParams(
        HttpRequestMessage request,
        Uri? baseUri,
        PaginationParameters parameters)
    {
        if ((baseUri is null && request.RequestUri is null) || (baseUri is null && !request.RequestUri!.IsAbsoluteUri))
        {
            throw new InvalidOperationException(
                "Either baseUri or requestUri must be set. Only a RelativeUri is not enough");
        }

        request.RequestUri = new Uri(baseUri!, request.RequestUri!)
            .WithAddedOrUpdatedQueryParameters(parameters.Page, parameters.Limit);
    }
}
